	Books about programming languages often cover only the first two, or discuss usage only spottily. Maybe that’s because the first two are in some ways easier to write about. Grammar and vocabulary are properties of the language alone, but usage is characteristic of a community that uses it. Madam, kook, level,   racecar    ,  sacecas, peep, bob. The Java programming language, for example, is object-oriented with single inheritance and supports an imperative (statement-oriented) coding style within each method. The libraries address graphic display support, networking,                         istributed computing, and security. 
	But how is the language best put to use in practice? There is another point. Programs, unlike spoken sentences and unlike most books and magazines, are                      likely to be changed over time! It’s typically not enough to produce code that operates effectively and is readily understood by other persons; one must also organize the code so that it is easy to modify. There may be ten ways to write code for some task T. 
Of those ten ways, seven will be awkward, inefficient, or puzzling. Of the                            other three, which is most likely to be similar to the code needed for the task T' in next year’s software release?
